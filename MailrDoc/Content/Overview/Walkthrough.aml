<?xml version="1.0" encoding="utf-8"?>
<topic id="dcd4a622-3d41-4cc4-b8de-0822b78d49fc" revisionNumber="1">
	<developerWalkthroughDocument
		xmlns="http://ddue.schemas.microsoft.com/authoring/2003/5"
		xmlns:xlink="http://www.w3.org/1999/xlink">

		<introduction>
			<para>
				The following process illustrates how you can use
				localized email templates in your application.
				It assumes that the templates are in HTML format.
				The process would be similar for plain-text
				templates with a few obvious steps skipped.
			</para>
		</introduction>

		<!-- One or more procedure or section with procedure -->
		<procedure>
			<title>Build default template</title>

			<steps class="ordered">
				<step address="BuildWorkingDefault">
					<content>
						<para><legacyBold>Build a design-time template</legacyBold></para>
						<para>
							Normally, you start by building an email template in the default language, 
							such as English (e.g. using the <codeInline>en-us</codeInline> culture).
							When designing the default email template, keep in mind the following:
						</para>
						<list class="bullet">
							<listItem>
								<para>
									This template file is only used for the design phase;
									it will not be deployed with the application.
									To prevent the file from being deployed with the application,
									in the file <ui>Properties</ui> window,
									set <userInput>Build Action</userInput> to 
									<codeInline>None</codeInline> and
									<userInput>Copy to Output Directory</userInput> to 
									<codeInline>Do Not Copy</codeInline>.
								</para>
							</listItem>
							<listItem>
								<para>
									To make it easier to test in the browser, give the file an HTML
									(or similar) extension.									
								</para>
							</listItem>
							<listItem>
								<para>
									The template file name should include the name of the template,
									the culture (or language) suffix, and an indicator that this is 
									not a deployable file, such as <codeInline>Hello_en-us.Design.html</codeInline>.									
								</para>
							</listItem>
							<listItem>
								<para>
									Use the 
									<externalLink>
										<linkText>Razor syntax</linkText>
										<linkUri>https://github.com/Antaris/RazorEngine/wiki/1.-About-Razor-and-its-syntax</linkUri>
									</externalLink>
									(such as <codeInline>@Model.PLACEHOLDERNAME</codeInline>)
									for the variables that will be affected by the transformations.
								</para>								
							</listItem>
							<listItem>
								<para>							
									Use the <codeInline>title</codeInline> element of the template
									to define the email subject (the title can also include placeholders).
								</para>								
							</listItem>
							<listItem>
								<para>
									Use the <codeInline>style</codeInline> element 
									inside of the template <codeInline>body</codeInline> to group
									the CSS definitions.
									Do not use the inline styles for shared styles at this point; you will do it later.
								</para>								
							</listItem>
							<listItem>
								<para>
									If the <codeInline>html</codeInline> element of the template
									includes the <codeInline>lang</codeInline> attribute,
									make sure that it reflects the appropriate language code.
								</para>
							</listItem>
						</list>
						<para>
							Your template structure will look something like this:
						</para>
						<code language="htm">
						<![CDATA[
							<!DOCTYPE html>
							<html lang="en">
							<head>
								<title>EMAIL SUBJECT</title>
								<meta charset="utf-8">
								<meta name="viewport" content="width=device-width">
							</head>
							<body bgcolor="#fff">
								<style type="text/css">
									* {
										margin: 0;
										padding: 0;
									}

									* {
										font-family: "Helvetica", Arial, sans-serif;
									}
									/* More styles go here */
								</style>

								<!-- HEADER -->
								<table class="head-wrap">
									<tr><td>HEADER CODE</td></tr>
								</table>
								<!-- /HEADER -->
								<!-- BODY -->
								<table class="body-wrap">
									<tr><td>BODY CODE</td></tr>
								</table>
								<!-- /BODY -->
								<!-- FOOTER -->
								<table class="footer-wrap">
									<tr><td>FOOTER CODE</td></tr>
								</table>
								<!-- /FOOTER -->
							</body>
							</html>
						]]> 
						</code>
					</content>
				</step>
				<step address="BuildFinalDefault">
					<content>
						<para><legacyBold>Build the run-time template</legacyBold></para>
						<para>
							Once you are satisfied with the layout and wording of 
							the design-time template tested in the web browser(s), 
							convert it to the email- and Razor-friendly format.
							To do this, you need to make sure that the CSS definitions
							are applied to elements inline and the template code will 
							not result in the Razor parsing errors.
						</para>
						<list class="bullet">
							<listItem>
								<para>
									Use a tool such as Campaign Monitor's
									<externalLink>
										<linkText>CSS Inliner</linkText>	
										<linkUri>http://inliner.cm</linkUri>
									</externalLink>
									to convert CSS definitions into inline styles.
								</para>
								<alert>
									<para>
										CSS Inliner leaves the <codeInline>styles</codeInline>
										element intact resulting in style redundancy,
										but it should not cause problems other than somewhat bloated
										code.
									</para>
								</alert>
							</listItem>
							<listItem>
								<para>
									Save the inlined text in the template file that your application will use.
									The name of the file will be similar to the name of the working file,
									only it will not have the design-time file indicator, such as
									<codeInline>Hello_en-us.html</codeInline>.
								</para>
							</listItem>
							<listItem>
								<para>
									Make sure that the <userInput>Build Action</userInput> setting of this file 
									is set to <codeInline>Content</codeInline>.
								</para>
							</listItem>
							<listItem>
								<para>
									Make sure that the resulting template complies with Razor syntax.
									In particular, remember that the <codeInline>@</codeInline> character
									has special meaning, so unless it defines a placeholder
									all occurrences of the <codeInline>@</codeInline> sign must be escaped
									(i.e. replaced with <codeInline>@@</codeInline> signs).
									A typical case would affect the CSS definition used to target 
									<codeInline>@media</codeInline> element.
									If your template contains <codeInline>@media</codeInline> elements,
									replace them with <codeInline>@@media</codeInline>.
								</para>
							</listItem>
							<listItem>
								<para>
									Test the run-time version of the default email template in the browser(s).
									If you find problems, make adjustments to the working version,
									and repeat the steps to generate the run-time version until you are
									satisfied with the result.
								</para>
							</listItem>
							<listItem>
								<para>
									Test the final version using 
									<link xlink:href="702e11e9-9858-4173-950f-083888e33b06"><token>PRODUCTNAMEEXE</token></link>.
									Make sure you verify the email in different clients,
									including web-based, desktop, mobile.
									If you run into any problems fix the design-time version of the template
									and re-run the process.
								</para>
							</listItem>
						</list>
					</content>
				</step>
			</steps>
			<conclusion>
				<content>
					<alert>
						<para>
							This process seems a bit labor intensive and there may be a way to automate it.
							For example, instead of manually generating the run-time version of the template
							from the design-time version, your application may do it automatically.
							Unfortunately, in this case, you will lose the option to test the run-time version
							without running your application. 
							Another handy option would be to modularize your template by splitting common
							elements -- such as header, footer, styles -- into separate files, but
							again doing this would make ad hoc testing more difficult.							
						</para>
					</alert>
				</content>
			</conclusion>
		</procedure>

		<section address="Localize">
			<title>Localize template</title>
			<content>
				<para>
					If your application supports multiple languages, use the following
					template localization process.
				</para>
				
				<procedure>
					<title>Translate templates</title>
					<steps class="ordered">
						<step>
							<content>
								<para>
									Send the design-time -- not the run-time inlined -- version of the
									default template to the translators.
								</para>
							</content>
						</step>
						<step>
							<content>
								<para>
									Save translated templates with the suffixes indicating
									the culture or language, such as 
									<codeInline>Hello_es-mx.Design.html</codeInline>,
									<codeInline>Hello_ru.Design.html</codeInline>, or
									<codeInline>Hello_zh-cn.Design.html</codeInline>
								</para>
							</content>
						</step>
						<step>
							<content>
								<para>
									If the <codeInline>html</codeInline> element of the template
									includes the <codeInline>lang</codeInline> attribute,
									make sure that it reflects the appropriate language code,
									such as <codeInline>es</codeInline> or <codeInline>ru</codeInline>.
								</para>
							</content>
						</step>
						<step>
							<content>
								<para>
									For languages with right-to-left text direction:
								</para>
							<list class="bullet">
								<listItem>
									<para>
										Set the <codeInline>dir</codeInline> attribute
										of the template's <codeInline>html</codeInline> tag
										to <codeInline>rtl</codeInline>.
									</para>
								</listItem>
								<listItem>
									<para>
										For all textual elements,
										set the <codeInline>direction</codeInline> style
										to <codeInline>rtl</codeInline> and 
										<codeInline>text-align</codeInline> to
										<codeInline>right</codeInline>, 
										such as:
									</para>
									<code language="html">
									<![CDATA[
										<style type="text/css">
											* {
												direction: rtl;
												text-align: right;
											}
											...
										</style>
									]]>
									</code>
								</listItem>
								<listItem>
									<para>
										Convert and test the updated template using the same 
										steps outlined for the default template.
										Make sure that the run-time template file names reflect
										the appropriate culture or language codes.
									</para>
								</listItem>
							</list>
							</content>
						</step>
					</steps>
					<conclusion>
						<content>
							<para>
								Once you are satisfied with the run-time templates,
								you can use them from your application with the help of
								<link xlink:href="9ba844f4-869d-43df-8110-243b0bace57d"><token>PRODUCTNAMELIB</token></link>.
							</para>							
						</content>
					</conclusion>
				</procedure>
				
			</content>
		</section>

		<relatedTopics>
			<link xlink:href="fbc07002-a86a-414b-aab7-381641c6fbe8" />
			<link xlink:href="dbc0138a-0163-4be4-9421-c1fb5612094c" />
		</relatedTopics>
	</developerWalkthroughDocument>
</topic>
